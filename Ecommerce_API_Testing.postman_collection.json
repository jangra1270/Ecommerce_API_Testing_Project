{
  "info": {
    "name": "Ecommerce API Testing (CRUD + Chaining)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "ecommerce-api-testing-collection"
  },
  "item": [
    {
      "name": "Products",
      "item": [
        {
          "name": "GET - All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Response is JSON array', function () { pm.response.to.be.json; const arr = pm.response.json(); pm.expect(Array.isArray(arr)).to.eql(true); pm.expect(arr.length).to.be.above(0); });",
                  "pm.test('Response time < 1200ms', function () { pm.expect(pm.response.responseTime).to.be.below(1200); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST - Create Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"QA Test Product {{randomInt}}\", \"price\": 109.95, \"description\": \"Created from Postman for testing\", \"image\": \"https://i.pravatar.cc/300\", \"category\": \"electronics\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200/201', function () { pm.expect([200,201]).to.include(pm.response.code); });",
                  "const json = pm.response.json();",
                  "pm.test('Has id', function () { pm.expect(json).to.have.property('id'); });",
                  "if (json.id) { pm.environment.set('productId', json.id); }",
                  "pm.test('Has title & category', function () { pm.expect(json).to.have.property('title'); pm.expect(json).to.have.property('category'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET - Product by ID (from POST)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{productId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
                  "const json = pm.response.json();",
                  "pm.test('Returned product has same id', function () { pm.expect(String(json.id)).to.eql(String(pm.environment.get('productId'))); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT - Update Product (full)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"QA Test Product (Updated Full)\", \"price\": 199.99, \"description\": \"Full update by PUT request\", \"image\": \"https://i.pravatar.cc/300\", \"category\": \"electronics\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{productId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "const json = pm.response.json();",
                  "pm.test('Title updated', function () { pm.expect(json.title).to.include('Updated'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PATCH - Update Product (partial)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"price\": 249.5}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{productId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "const json = pm.response.json();",
                  "pm.test('Price updated', function () { pm.expect(json.price).to.be.above(0); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE - Product by ID",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{productId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200/204', function () { pm.expect([200,204]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "randomInt",
      "value": "{{$randomInt}}",
      "type": "string"
    }
  ]
}